server {

    server_name example.com;

    location /login.html {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        proxy_pass "http://$upstream:5001";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /login {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        # mylimit definition is typically placed in the http block of the Nginx configuration file
	    limit_req zone=mylimit burst=5 nodelay;
        proxy_pass "http://$upstream:5001";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
     
    location / {
        # Setting this variable delays the resolving of the server so 
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;

	    auth_request /auth;
        auth_request_set $auth_status $upstream_status;
        error_page 401 403 = @error401;

	    # Define error handling
	    error_page 502 =200 /maintenance.html;

        proxy_pass "http://$upstream:3000";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location = /auth {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        internal;
        proxy_pass http://$upstream:5001;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location @error401 {
        return 302 /login.html;
    }

    # Location block for the maintenance page
	location = /maintenance.html {
	    root /var/www/html;
	    internal;
    }

    location /static/ {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        proxy_pass "http://$upstream:3000";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_redirect off;
    }

    location /ws {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        proxy_pass "http://$upstream:3000";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header Connection "Upgrade";
        proxy_redirect off;
        proxy_read_timeout 3600;
        proxy_send_timeout 3600;
    }

    location /hub/ws {
        # Setting this variable delays the resolving of the server so
        # Nginx does not abort if the server can't be resolved during startup
        resolver 127.0.0.11 valid=30s;
        set $upstream taskflow-dtf;
        proxy_pass "http://$upstream:5001";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_cache_bypass $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header Connection "Upgrade";
        proxy_redirect off;
        proxy_read_timeout 300;
        proxy_send_timeout 300;
    }

    # This is redirecting with the $host not the $server_name
    # So ANY URL can work and it is up to our server to enforce CORS so we only serve our URLs
    # If we also proxy the HTTPS connection then the invalid SSL cert is accepted by Cloudflare
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
    listen 80;

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


